---
---

<div class="theme-toggle">
    <span id="theme-text" aria-live="polite"></span>

    <button id="theme-toggle" class="theme-toggle-btn" aria-label="Toggle theme">
        <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
        <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
    </button>
</div>

<script>
import { getThemePreference, setThemePreference } from '../utils/themeToggle';
import { languageStore } from '../store/languageStore';

function updateThemeText(theme: string) {
    const themeText = document.getElementById('theme-text');
    if (themeText) {
        const key = theme === 'light' ? 'theme.morning' : 'theme.evening';
        themeText.textContent = languageStore.translate(key);
        themeText.classList.remove('fade-out');
        themeText.classList.add('fade-in');
    }
}

// Initialize theme and text - check if theme is already set
let currentTheme = document.documentElement.getAttribute('data-theme');
if (!currentTheme) {
    currentTheme = getThemePreference();
    document.documentElement.setAttribute('data-theme', currentTheme);
}
updateThemeText(currentTheme);

// Theme toggle functionality
const themeToggle = document.getElementById('theme-toggle');
themeToggle?.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    
    const themeText = document.getElementById('theme-text');
    if (themeText) {
        themeText.classList.remove('fade-in');
        themeText.classList.add('fade-out');
        
        setTimeout(() => {
            setThemePreference(newTheme);
            updateThemeText(newTheme);
        }, 150);
    }
});

// Update text when language changes
window.addEventListener('languageChange', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    if (currentTheme) {
        updateThemeText(currentTheme);
    }
});
</script>

<style>
.theme-toggle {
    z-index: 100;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.theme-toggle-btn {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-color);
    background-color: var(--bg-accent);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.theme-toggle-btn:hover {
    transform: scale(1.1);
}

[data-theme='light'] .moon-icon {
    display: block;
}

[data-theme='light'] .sun-icon {
    display: none;
}

[data-theme='dark'] .sun-icon {
    display: block;
}

[data-theme='dark'] .moon-icon {
    display: none;
}

#theme-text {
    min-width: 120px;
    transition: opacity 0.15s ease-in-out;
}

.fade-in {
    animation: fadeIn 0.15s ease-in forwards;
}

.fade-out {
    animation: fadeOut 0.15s ease-out forwards;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}
</style>
